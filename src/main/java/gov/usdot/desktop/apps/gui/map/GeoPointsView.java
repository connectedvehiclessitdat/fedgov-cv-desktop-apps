package gov.usdot.desktop.apps.gui.map;

import gov.usdot.desktop.apps.data.GeoPoint;
import gov.usdot.desktop.apps.gui.controls.NotificationWindow;
import gov.usdot.desktop.apps.gui.controls.NumericTextField;
import gov.usdot.desktop.apps.provider.GeoPointProvider;
import gov.usdot.desktop.apps.provider.InitializationException;
import gov.usdot.desktop.apps.renderer.GeoPointRenderer;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.filechooser.FileFilter;
import java.lang.reflect.Field;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ComponentInputMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.plaf.ActionMapUIResource;

import org.apache.commons.lang.StringUtils;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MapRectangleImpl;
import org.openstreetmap.gui.jmapviewer.interfaces.MapMarker;

public class GeoPointsView extends javax.swing.JFrame  implements GeoPointRenderer  {

	private static final long serialVersionUID = 1L;

	/**
     * Creates new form GeoPointsView
     */
    public GeoPointsView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        stopButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        splitterPane = new javax.swing.JSplitPane();
        mapView = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();
        designToolBar = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        centerButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        helpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Map Viewer");
        setMinimumSize(new java.awt.Dimension(200, 200));
        setName("mainWindow"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {startButton, stopButton});

        splitterPane.setDividerLocation(408);
        splitterPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitterPane.setResizeWeight(0.5);
        splitterPane.setToolTipText("");
        splitterPane.setOneTouchExpandable(true);

        mapView.setName("mapView"); // NOI18N
        mapView.setOpaque(false);
        splitterPane.setLeftComponent(mapView);

        console.setEditable(false);
        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        splitterPane.setRightComponent(jScrollPane1);

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear console content");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        designToolBar.setFloatable(false);
        designToolBar.setRollover(true);

        openButton.setText("Open");
        openButton.setToolTipText("Open GUI configuration file");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        designToolBar.add(openButton);

        saveButton.setText("Save");
        saveButton.setToolTipText("Save GUI configuration file");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        designToolBar.add(saveButton);
        designToolBar.add(jSeparator1);

        undoButton.setText("Undo");
        undoButton.setToolTipText("Undo last modification");
        undoButton.setFocusable(false);
        undoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });
        designToolBar.add(undoButton);

        redoButton.setText("Redo");
        redoButton.setToolTipText("Redo last undone modification");
        redoButton.setFocusable(false);
        redoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });
        designToolBar.add(redoButton);
        designToolBar.add(jSeparator2);

        centerButton.setText("Center");
        centerButton.setToolTipText("Recenter map to a geo point");
        centerButton.setFocusable(false);
        centerButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        centerButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        centerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerButtonActionPerformed(evt);
            }
        });
        designToolBar.add(centerButton);
        designToolBar.add(jSeparator3);

        helpButton.setText("Help");
        helpButton.setToolTipText("Show help");
        helpButton.setFocusable(false);
        helpButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        helpButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        designToolBar.add(helpButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(splitterPane, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addGap(18, 18, 18)
                        .addComponent(designToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitterPane, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(designToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearButton))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        String text = startButton.getText();
        if ( text.equals("Start") ) {
            start();           
        } else if ( text.equals("Pause") ) {
            pause();
        } else if ( text.equals("Resume") ) {
            resume();
        } else {
            startButton.setText("Start");
            stopButton.setEnabled(true);
            assert(false);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stop();
    }//GEN-LAST:event_stopButtonActionPerformed
    
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        console.setText(null);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
			provider.dispose();
		} catch (InitializationException e) {
		}
    }//GEN-LAST:event_formWindowClosing

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // open called
        // if dirty prompt to save
    	JFileChooser fileChooser = new JFileChooser();
    	fileChooser.setDialogTitle("Open configuration file");
    	fileChooser.setMultiSelectionEnabled(false);
    	String guiConfigFile = app.getGuiConfigFile();
    	if ( guiConfigFile != null )
    		fileChooser.setSelectedFile(new File(guiConfigFile));
		fileChooser.setFileFilter(new FileFilter() {
	        public boolean accept(File f) {
	          return f.getName().toLowerCase().endsWith(".json") || f.isDirectory();
	        }
	        public String getDescription() {
	          return "JSON configuration files";
	        }
	      });
		
		File file = null;
    	while(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION && !(file = fileChooser.getSelectedFile()).exists())
    		JOptionPane.showMessageDialog(this, "Please select an existing file!", "File does not exist", JOptionPane.ERROR_MESSAGE);
    	
    	if ( file != null ) {
          app.open(file, true);
    	  isDirty = false;
    	}
    }//GEN-LAST:event_openButtonActionPerformed
    
    boolean isDirty = false;

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    	JFileChooser fileChooser = new JFileChooser();
    	fileChooser.setDialogTitle("Save configuration file");
    	String guiConfigFile = app.getGuiConfigFile();
    	if ( guiConfigFile != null )
    		fileChooser.setSelectedFile(new File(guiConfigFile));
		fileChooser.setFileFilter(new FileFilter() {
	        public boolean accept(File f) {
	          return f.getName().toLowerCase().endsWith(".json") || f.isDirectory();
	        }
	        public String getDescription() {
	          return "JSON configuration files";
	        }
	      });
    	if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
    	  File file = fileChooser.getSelectedFile();
          app.save(file);
    	  isDirty = false;
    	}
    }//GEN-LAST:event_saveButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        // undo called: perform undo, move left
        System.out.println("Undo called");
    }//GEN-LAST:event_undoButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        // redo called: move right, perform redo
        System.out.println("Redo called");        
    }//GEN-LAST:event_redoButtonActionPerformed

    private void centerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerButtonActionPerformed
        JMapViewer map = app.getMapViewer();
        Coordinate c = map.getPosition();
        double latitude = c.getLat(), longitude = c.getLon();
        
        NumericTextField centerLatitude = new NumericTextField();
        centerLatitude.setText(new Double(latitude).toString());
        NumericTextField centerLongitude = new NumericTextField();
        centerLongitude.setText(new Double(longitude).toString());
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new GridLayout(2, 2, 8, 8));
        centerPanel.add(new JLabel("Latitude"));
        centerPanel.add(centerLatitude);
        centerPanel.add(new JLabel("Longitude"));
        centerPanel.add(centerLongitude);
        int selection = JOptionPane.showConfirmDialog(this, centerPanel, 
                "Center Map", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (selection == JOptionPane.CANCEL_OPTION)
            return;
        
        String strLatitude = centerLatitude.getText();
        String strLongitude = centerLongitude.getText();
        String message = null;
        try {
            latitude = Double.parseDouble(strLatitude);
        } catch ( NumberFormatException ex ) {
            message = "Invalid latitude value. Reason: " + ex.getMessage();
        }
        if ( message == null ) {
            try {
                longitude = Double.parseDouble(strLongitude);
            } catch (NumberFormatException ex) {
                message = "Invalid longitude value. Reason: " + ex.getMessage();
            }
        }
        if ( message == null ) {
            map.setDisplayPositionByLatLon(latitude,longitude,map.getZoom());
        } else {
            JOptionPane.showMessageDialog(this, message, "Invalid double value", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_centerButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        System.out.println("Help called"); 
    }//GEN-LAST:event_helpButtonActionPerformed
    
    private GeoPointsMapper app = null;
    private GeoPointProvider provider = null;
    private BlockingQueue<GeoPoint> inputQueue = new LinkedBlockingQueue<GeoPoint>();
    
    Rectangle selection = null;
    Point anchor = null;
    MapRectangleImpl selectionRectangle = null;
    
    GeoPointsMapper getApplication() {
    	return this.app;
    }
    
    public void setApplication(GeoPointsMapper app) {
        this.app = app;

        final JMapViewer map = app.getMapViewer();
        map.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 1) {
                    Point p = e.getPoint();
                    Coordinate c = map.getPosition(p);
                    System.out.print(String.format("Click position: lat %f, lon %f, zoom %d\n", c.getLat(), c.getLon(), map.getZoom()));
                }
            }
            
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1 ) {
                    anchor = e.getPoint();
                    selection = new Rectangle(anchor);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                if ( e.getButton() == MouseEvent.BUTTON1 && selection != null && (selection.height > 0 || selection.width > 0) ) {
                    drawSelectionRectangle();
                    anchor = null;
                    selection = null;
                }
            }
        });
        
        map.addMouseMotionListener(new MouseMotionListener() {
            
            public void mouseDragged(MouseEvent e) {
            	if ( selection != null && anchor != null ) {
	                removeSelectionRectangle();
	                selection.setBounds((int) Math.min(anchor.x, e.getX()), (int) Math.min(anchor.y, e.getY()),
	                        (int) Math.abs(e.getX() - anchor.x), (int) Math.abs(e.getY() - anchor.y));
	                drawSelectionRectangle(Color.gray, false);
            	}
            }

            public void mouseMoved(MouseEvent e) {
            }
        });
        
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                // in designer mode, autosave config file
                //JOptionPane.showMessageDialog(null, "Window closing...", "Invalid double value", JOptionPane.INFORMATION_MESSAGE);
            }
        });
    }

    String[] colors = {
            "black", "blue", "cyan", "darkGray",
            "gray", "green", "lightGray", "magenta", 
            "orange", "pink", "red", "white", "yellow"};
    
    public String getColor(Color color) {
    	for( String c : colors ) {
    		if ( color == getColor(c) )
    			return c;
    	}
    	return String.format("#%02X%02X%02X", color.getRed(), color.getGreen(), color.getBlue());
    }

    public Color getColor(String colorName) {
    	if ( colorName.startsWith("#") )
    		return Color.decode(colorName);
        try {
            Field field = Color.class.getField(colorName);
            return (Color)field.get(null);
        } catch (Exception e) {
        	return Color.black;
        }
    }
    
    private void drawSelectionRectangle() {
        assert (selection != null && (selection.height > 0 || selection.width > 0));
        String msg = "Do you want to draw a rectangle with selected color?";
        if ( isSingleRectangle() )
        	msg += "\nNote that other rectangles will be erased.";
        String colorName = (String) JOptionPane.showInputDialog(
                this,
                msg,
                "Draw rectangle?",
                JOptionPane.QUESTION_MESSAGE,
                null,
                colors,
                colors[0]);
        
        removeSelectionRectangle();
        
        if ( colorName != null ) {       
	        drawSelectionRectangle(getColor(colorName), true);
	        
	        selectionRectangle = null;
        }
    }
    
    boolean singleRectangle = true;

    public boolean isSingleRectangle() {
		return singleRectangle;
	}

	public void setSingleRectangle(boolean singleRectangle) {
		this.singleRectangle = singleRectangle;
	}

	private void drawSelectionRectangle(Color color, boolean apply) {
        assert(color != null);
        JMapViewer map = app.getMapViewer();
        Coordinate nw = map.getPosition(selection.x, selection.y);
        Coordinate se = map.getPosition(selection.x + selection.width, selection.y + selection.height);

        selectionRectangle = new MapRectangleImpl(nw, se);
        selectionRectangle.setColor(color);
        
        if ( isSingleRectangle() && apply )
        	map.removeAllMapRectangles();
        map.addMapRectangle(selectionRectangle);
        
        if ( apply )
        	provider.region(nw.getLat(), nw.getLon(), se.getLat(), se.getLon());
    }
    
    private void removeSelectionRectangle() {
        if ( selectionRectangle != null ) {
            app.getMapViewer().removeMapRectangle(selectionRectangle);
            selectionRectangle = null;
        }
    }
    
    public void setProvider(GeoPointProvider provider ) {
        this.provider = provider;
    }
    
    private void startProvider() {
        new Thread() {
            @Override
            public void run() {
                try {
					provider.start();
				} catch (InitializationException ex) {
					reportInitializationException("start", ex);
				}
            };
        }.start();
    }
    
    private void reportInitializationException(String operation, InitializationException ex) {
		String msg = ex.getMessage();
		if ( StringUtils.isBlank(msg) ) {
			Throwable cause = ex.getCause();
			if ( cause != null )
				msg = cause.getMessage();
		}
		System.out.print(String.format("Couldn't %s provider. Reason: %s.", operation, msg));

    }
    
	private Timer timer = null;
	
	void startMarkersFlusher(GeoPointRenderer render)
	{
		if ( markerFlushInterval == -1 )
			return;
		
		final GeoPointRenderer renderer = render;
		
		if ( timer == null )
			timer = new Timer(true);
		
		TimerTask task = new TimerTask() {
			@Override
			public void run()
			{
				renderer.render(GeoPoint.flushData);
			}
		};
		timer.schedule(task, markerFlushInterval, markerFlushInterval);
	}
	
	void stopMarkersFlusher()
	{
		if ( timer != null )
		{
			timer.cancel();
			timer.purge();
			timer = null;
		}
	}
    
    private Color markerColor = Color.green;
    
    public Color getMarkerColor() {
		return markerColor;
	}

	public void setMarkerColor(Color markerColor) {
		this.markerColor = markerColor;
	}

	private int markerTTL = 500;

    public int getMarkerTTL() {
		return markerTTL;
	}

	public void setMarkerTTL(int markerTTL) {
		this.markerTTL = markerTTL;
	}
	
	private int markerFlushInterval = -1;

	public int getMarkerFlushInterval() {
		return markerFlushInterval;
	}

	public void setMarkerFlushInterval(int markerFlushInterval) {
		this.markerFlushInterval = markerFlushInterval;
	}
	
	private boolean forceMarkerVisible = false;
	
    public boolean isForceMarkerVisible() {
		return forceMarkerVisible;
	}

	public void setForceMarkerVisible(boolean forceMarkerVisible) {
		this.forceMarkerVisible = forceMarkerVisible;
	}
	
	public void removeAllDynamicMarkers() {
    	JMapViewer map = app.getMapViewer();
    	for ( MapMarker mm :  map.getMapMarkerList().toArray(new MapMarker[0])) { // we need to make a copy of the list to avoid removing from it while traversion
    		if ( mm.getBackColor().getRGB() == markerColor.getRGB() ) {	// we do not want to delete permanent markers such as RSUs from KML file that's why we can't use map.removeAllMapMarkers()
    			map.removeMapMarker(mm);
    		}
    	}
	}

	public void start() {
        if ( provider.canPause() )
            startButton.setText("Pause");
        else
            startButton.setEnabled(false);
        if ( provider.canStop() )
            stopButton.setEnabled(true);
        inputQueue.clear();

        if ( markerTTL == -1 )
        	removeAllDynamicMarkers();
        
        GeoPointsWorker worker = new GeoPointsWorker(app, markerColor, markerTTL);
        worker.setForceMarkerVisible(isForceMarkerVisible());
        worker.execute();
        startProvider();
        startMarkersFlusher(this);
    }
    
    public void pause() {
        assert( provider.canPause());
        startButton.setText("Resume");
        try {
			provider.pause();
		} catch (InitializationException ex) {
			reportInitializationException("pause", ex);
		}
    }
    
    public void resume() {
        assert( provider.canPause());        
        startButton.setText("Pause");
        try {
			provider.resume();
		} catch (InitializationException ex) {
			reportInitializationException("resume", ex);
		}
    }

    public void stop() {
        if ( provider.canPause() )
            startButton.setText("Start");
        else
            startButton.setEnabled(true);
        if ( provider.canStop() ) {
            stopButton.setEnabled(false);
            try {
				provider.stop();
			} catch (InitializationException ex) {
				reportInitializationException("stop", ex);
			}
            stopMarkersFlusher();
        }
    }

    public BlockingQueue<GeoPoint> getInputQueue() {
        return inputQueue;
    }
    
    public void render(GeoPoint... points) {
        for( GeoPoint point : points ) {
            try {
                inputQueue.put(point);
            } catch ( InterruptedException ex ) {  
            }
        }
    }
    
    public void render(String message) {
    	if ( !StringUtils.isBlank(message) ) {
	    	message = message.trim();
	    	if ( !message.startsWith("<html>") && !message.startsWith("<HTML>") ) {
	            String color = String.format("#%02X%02X%02X", markerColor.getRed(), markerColor.getGreen(), markerColor.getBlue());
	            message = String.format("<html><body><h3><font color=\"%s\">&nbsp;&nbsp;%s&nbsp;&nbsp;</font></h3><body></html>", color, message);
	    	}
	        NotificationWindow.showNotificationWindow( app.getMapViewer(), message, 4000 );
    	}
    }
    
    public void addActionKeys() {
        addActionKey(openButton, "open", "control O", "Ctrl+O");
        addActionKey(saveButton, "save", "control S", "Ctrl+S");
        addActionKey(undoButton, "undo", "control Z", "Ctrl+Z");
        addActionKey(redoButton, "redo", "control Y", "Ctrl+Y");
        addActionKey(helpButton, "help", "F1", "F1");        
    }
    
    private void addActionKey(final JButton button, final String action, final String key, final String mnemonic) {
        String toolTipText = String.format("<html>%s (%s)<br>%s</html>", button.getText(), mnemonic, button.getToolTipText());
        button.setToolTipText(toolTipText);
 
        Action click = new AbstractAction() {
			private static final long serialVersionUID = 1L;

			public void actionPerformed(ActionEvent e) {
                button.doClick();
            }
        };
        InputMap keyMap = new ComponentInputMap(button);
        keyMap.put(KeyStroke.getKeyStroke(key), action);

        ActionMap actionMap = new ActionMapUIResource();
        actionMap.put(action, click);

        SwingUtilities.replaceUIActionMap(button, actionMap);
        SwingUtilities.replaceUIInputMap(button, JComponent.WHEN_IN_FOCUSED_WINDOW, keyMap);
    }
    
    final JSplitPane getSplitterPane() {
    	return splitterPane;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeoPointsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeoPointsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeoPointsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeoPointsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeoPointsView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton centerButton;
    private javax.swing.JButton clearButton;
    public javax.swing.JTextArea console;
    public javax.swing.JToolBar designToolBar;
    private javax.swing.JButton helpButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    public javax.swing.JScrollPane mapView;
    private javax.swing.JButton openButton;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JSplitPane splitterPane;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables

}
